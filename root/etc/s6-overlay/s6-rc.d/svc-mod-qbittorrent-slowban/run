#!/usr/bin/with-contenv python3

from urllib import request, parse, error
import json
import time
import logging
from os import environ, system

qb_port = environ.get("WEBUI_PORT", 8080)
min_speed = int(environ.get("SLOWBAN_MIN_SPEED", -1)) # in B/s
threshold_time = int(environ.get("SLOWBAN_THRESHOLD_TIME", 180)) # in s#

clear_periodically = int(environ.get("SLOWBAN_CLEAR_PERIODICALLY", ""))

stub_requests = True if environ.get("SLOWBAN_STUB_REQUESTS", "false") == "true" else False
poll_interval = float(environ.get("SLOWBAN_POLL_INTERVAL", 10))
log_level = environ.get("SLOWBAN_LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, log_level, logging.INFO), 
    format="%(asctime)s - %(levelname)s - %(message)s"
)

low_speed_peers = {}

if clear_periodically != "":
    system(f'(crontab -l 2>/dev/null; echo "{clear_periodically} /clean-banlist.sh") | crontab -')
    logging.info("set up cronjob")

if min_speed < 0:
    logging.error("You have to set the SLOWBAN_MIN_SPEED variable to a value that is not negative!")

def get_json(url):
    try:
        res = request.urlopen(url)
        res_body = res.read()
        json_response = json.loads(res_body.decode("utf-8"))
        return json_response
    except error.URLError as e:
        logging.error(f"Error occurred while fetching data: {e}")
        return None
    except json.JSONDecodeError as e:
        logging.error(f"Error occurred while parsing JSON: {e}")
        return None


def ban_peer(torrent_hash, peer):
    if stub_requests:
        logging.info(f"(stubbed) Peer {peer} banned (torrent {torrent_hash})")
        return

    try:
        data = parse.urlencode({"peers": peer}).encode()
        req = request.Request(
            f"http://localhost:{qb_port}/api/v2/transfer/banPeers",
            data=data
        )
        request.urlopen(req)
        logging.info("Peer {peer} banned (torrent {torrent_hash})")
    except error.URLError as e:
        logging.error(f"Error occurred while fetching data: {e}")
        return None
    except json.JSONDecodeError as e:
        logging.error(f"Error occurred while parsing JSON: {e}")
        return None

    logging.info(f"Peer {peer} banned (torrent {torrent_hash})")

def find_hashes():
    data = get_json(f"http://localhost:{qb_port}/api/v2/torrents/info?filter=active")
    torrent_hashes = []
    for torrent in data:
        if torrent["amount_left"] == 0:
            torrent_hashes.append(torrent["hash"])
    logging.debug(f"Active torrents: {torrent_hashes}")
    return torrent_hashes


def monitor_peers(torrent_hash):
    global low_speed_peers
    data = get_json(
        f"http://localhost:{qb_port}/api/v2/sync/torrentPeers?hash={torrent_hash}"
    )
    if data and "peers" in data:
        current_time = time.time()
        current_peers = set(data["peers"].keys())

        if torrent_hash not in low_speed_peers:
            low_speed_peers[torrent_hash] = {}

        for peer, info in data["peers"].items():
            upload_speed = info.get("up_speed", 0)
            if upload_speed < min_speed:
                if peer not in low_speed_peers[torrent_hash]:
                    low_speed_peers[torrent_hash][peer] = current_time
                elif current_time - low_speed_peers[torrent_hash][peer] > threshold_time:
                    ban_peer(torrent_hash, peer)
                    del low_speed_peers[torrent_hash][peer]
            else:
                if peer in low_speed_peers[torrent_hash]:
                    del low_speed_peers[torrent_hash][peer]

        for peer in list(low_speed_peers[torrent_hash].keys()):
            if peer not in current_peers:
                logging.debug(f"Deleting peer {peer}")
                del low_speed_peers[torrent_hash][peer]

        logging.debug(f"Peers at risk for torrent {torrent_hash}: {low_speed_peers[torrent_hash]}")

def main():

    while True:
        torrent_hashes = find_hashes()
        for torrent_hash in torrent_hashes:
            monitor_peers(torrent_hash)
        logging.debug("Sleeping")
        time.sleep(poll_interval)


if __name__ == "__main__":
    main()