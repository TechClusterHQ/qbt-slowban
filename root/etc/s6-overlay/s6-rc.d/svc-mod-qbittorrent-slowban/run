#!/usr/bin/with-contenv python3

import urllib.request
import json
import time
import logging
from os import environ

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

qb_port = environ.get("WEBUI_PORT", 8080)
min_speed = int(environ.get("SLOWBAN_MIN_SPEED", 50000))
threshold_time = int(environ.get("SLOWBAN_THRESHOLD_TIME", 30))
stub_requests = True if environ.get("SLOWBAN_STUB_REQUESTS", "false") == "true" else False

def get_json(url):
    try:
        res = urllib.request.urlopen(url)
        res_body = res.read()
        json_response = json.loads(res_body.decode("utf-8"))
        return json_response
    except urllib.error.URLError as e:
        logging.error(f"Error occurred while fetching data: {e}")
        return None
    except json.JSONDecodeError as e:
        logging.error(f"Error occurred while parsing JSON: {e}")
        return None


def ban_peer(torrent_hash, peer):
    

    if stub_requests:
        logging.info(f"(stubbed) Peer {peer} banned (torrent {torrent_hash})")
        return

    try:
        urllib.request.urlopen(
            f"http://localhost:{qb_port}/api/v2/transfer/banPeer&peers={peer}",
            data=None,
        )
    except urllib.error.URLError as e:
        logging.error(f"Error occurred while fetching data: {e}")
        return None
    except json.JSONDecodeError as e:
        logging.error(f"Error occurred while parsing JSON: {e}")
        return None

    logging.info(f"Peer {peer} banned (torrent {torrent_hash})")

def find_hashes():
    data = get_json(f"http://localhost:{qb_port}/api/v2/torrents/info?filter=active")
    torrent_hashes = []
    for torrent in data:
        if torrent["amount_left"] == 0:
            torrent_hashes.append(torrent["hash"])
    return torrent_hashes


def monitor_peers(torrent_hash, low_speed_peers):
    data = get_json(
        f"http://localhost:{qb_port}/api/v2/sync/torrentPeers?hash={torrent_hash}"
    )
    if data and "peers" in data:
        current_time = time.time()
        for peer, info in data["peers"].items():
            up_speed = info.get("up_speed", 0)
            if up_speed < min_speed:
                if peer not in low_speed_peers:
                    low_speed_peers[peer] = current_time
                elif current_time - low_speed_peers[peer] >= threshold_time:
                    ban_peer(torrent_hash, peer)
            else:
                if peer in low_speed_peers:
                    del low_speed_peers[peer]


def main():
    torrent_hashes = find_hashes()
    low_speed_peers = {torrent_hash: {} for torrent_hash in torrent_hashes}

    while True:
        for torrent_hash in torrent_hashes:
            monitor_peers(torrent_hash, low_speed_peers[torrent_hash])
        time.sleep(3)


if __name__ == "__main__":
    main()
